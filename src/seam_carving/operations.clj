(ns seam-carving.operations
  "Provide certain operations on buffered images."
  (:use    [seam-carving.kernels]
           [seam-carving.auxiliary
            :only (get-raster-pixel-value
                   divide-workload
                   load-buffered-image
                   see-buffered-image)]
           [clojure.pprint])
  (:import [java.awt.image
            BufferedImage ColorConvertOp ConvolveOp WritableRaster]
           [java.awt.color ColorSpace]))

(def sobel-vertical-operation
  ^{:private true}
  (ConvolveOp. vertical-sobel-kernel))

(def sobel-horizontal-operation
  ^{:private true}
  (ConvolveOp. horizontal-sobel-kernel))

(defn- grayscale-operation [bimg]
  "returns the convolve operation necessary to create a grayscale
version of the BufferedImage."
  (new ColorConvertOp
       (-> bimg .getColorModel .getColorSpace)
       
       (ColorSpace/getInstance (ColorSpace/CS_GRAY))
       
       nil))

(defn- grayscale-operation [bimg]
  "returns the convolve operation necessary to create a grayscale
version of the BufferedImage."
  (ColorConvertOp. (-> bimg .getColorModel .getColorSpace)
                   (ColorSpace/getInstance (ColorSpace/CS_GRAY))
                   nil))

;; (defn- normalized-pixel-value [raster x y]
;;   "Takes a pixel and squares it."
;;   (Math/pow (get-raster-pixel-value raster x y) 2))

(defn- filter-image [op bimg x y]
  "Returns the raster generated by the operation on the buffered image."
  (.getData (. op filter bimg nil)))

(defn to-grayscale [bimg]
  "Provides a new grayscale version of the BufferedImage"
  (. (grayscale-operation bimg) filter bimg nil))

(defn sobel-operator [bimg]
  "Concurrently applies the sobel operation after grayscaling the
BufferedImage, getting the gradient of the image."
  (when bimg
    (let [img-width       (.getWidth  bimg)
          img-height      (.getHeight bimg)
          grayscaled-bimg (to-grayscale bimg)
          [horizontal-features vertical-features]
          (pcalls #(filter-image sobel-horizontal-operation
                                 grayscaled-bimg img-width img-height)
                  #(filter-image sobel-vertical-operation
                                 grayscaled-bimg img-width img-height))
          nprocs          (+ 2 (.availableProcessors
                                (Runtime/getRuntime)))
          result-image    (BufferedImage. img-width
                                          img-height
                                          (BufferedImage/TYPE_BYTE_GRAY))
          working-raster  (.getRaster result-image)]
      (defn apply-for [x0 x1]
        "Builds a rectangle of pixels and sets the pixels according to
the sobel formula. Then sets those pixels in the working raster of the
result image."
        (doseq [x (range x0 x1)
                y (range 0 img-height)]
          (let [pixel-index (dec (* (inc x) (inc y)))
                pixel-value
                (Math/sqrt
                 (+ (Math/pow
                     (get-raster-pixel-value horizontal-features x y) 2)
                    (Math/pow
                     (get-raster-pixel-value vertical-features x y) 2)))]
            (.setPixel working-raster x y (double-array 1 pixel-value)))))
      (dorun (pmap (fn [indexes]
                     (apply-for (first indexes)
                                (second indexes)))
                   (divide-workload img-width nprocs)))
      result-image)))
