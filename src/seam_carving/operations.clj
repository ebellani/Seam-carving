(ns seam-carving.operations
  "Provide certain operations on buffered images."
  (:use    [seam-carving.kernels]
           [seam-carving.auxiliary
            :only (get-raster-pixel-value
                   divide-workload)]
           [clojure.pprint])
  (:import [java.awt.image
            BufferedImage
            ColorConvertOp
            ConvolveOp
            WritableRaster]
           [java.awt Graphics]
           [java.awt.color ColorSpace]))

(def sobel-vertical-operation
  ^{:private true}
  (ConvolveOp. vertical-sobel-kernel))

(def sobel-horizontal-operation
  ^{:private true}
  (ConvolveOp. horizontal-sobel-kernel))

(defn filter-image [op bimg]
  "Returns the raster generated by the operation on the buffered image."
  (let [filtered-bimg     (BufferedImage. (.getWidth bimg)
                                          (.getHeight bimg)
                                          (BufferedImage/TYPE_BYTE_GRAY))]
    (.getData (. op filter bimg filtered-bimg))))

(defn ->grayscale [bimg]
  "Creates a new version of a BufferedImage"
  (let [gs-bimg     (BufferedImage. (.getWidth bimg)
                                    (.getHeight bimg)
                                    (BufferedImage/TYPE_BYTE_GRAY))
        gs-graphics (.getGraphics gs-bimg)]
    (.drawImage gs-graphics bimg 0 0 nil)
    (.dispose gs-graphics)
    gs-bimg))

(defn- sobel-pixel-value [vertical-features-bimg
                          horizontal-features-bimg
                          x y]
  (Math/sqrt
   (+ (Math/pow
       (get-raster-pixel-value horizontal-features-bimg x y) 2)
      (Math/pow
       (get-raster-pixel-value vertical-features-bimg x y) 2))))

(defn sobel-operator [bimg]
  "Concurrently applies the sobel operation after grayscaling the
BufferedImage, getting the gradient of the image."
  (when bimg
    (let [img-width       (.getWidth  bimg)
          img-height      (.getHeight bimg)
          grayscaled-bimg (->grayscale bimg)
          [horizontal-features vertical-features]
          (pcalls #(filter-image sobel-horizontal-operation
                                 grayscaled-bimg)
                  #(filter-image sobel-vertical-operation
                                 grayscaled-bimg))
          nprocs          (+ 2 (.availableProcessors
                                (Runtime/getRuntime)))
          result-image    (BufferedImage. img-width
                                          img-height
                                          (BufferedImage/TYPE_BYTE_GRAY))
          result-data     (.getData result-image)]
      
      (defn sobel-pixel-value [x y]
        "Combine the horizontal and vertical features to obtain the
gradient."
        (Math/floor
         (Math/sqrt
          (+ (Math/pow
              (get-raster-pixel-value horizontal-features x y) 2)
             (Math/pow
              (get-raster-pixel-value vertical-features x y) 2)))))
      
      (defn apply-for [x0 x1]
        "Builds a rectangle of pixels and sets the pixels according to
the sobel formula. Then sets those pixels in the working raster of the
result image."
        (doseq [x (range x0 x1)
                y (range 0 img-height)]
          (let [pixel-index (dec (* (inc x) (inc y)))]
            (.setSample result-data x y 0 (sobel-pixel-value x y)))))
      
      (dorun (pmap (fn [indexes]
                     (apply-for (first indexes)
                                (second indexes)))
                   (divide-workload img-width nprocs)))
      ;; sets back again the data into the bufferedimage, because java
      ;; makes sense.
      (do (.setData result-image result-data)
          result-image))))

